// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model Course {
  id              String        @id @default(cuid())
  title           String
  description     String
  price           Float
  courseImages    CourseImage[]
  enrollments     Enrollment[]
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  teacher         Teacher       @relation(fields: [teacherId], references: [id])
  teacherId       String
  courseType      CourseType
  address         String
  skillLevel      String
  startDate       DateTime
  durationInWeeks Int
  maxStudents     Int
  latitude        Float
  longitude       Float
  Message         Message[]
  students        Int           @default(0)
}

enum CourseType {
  online
  offline
}

model Enrollment {
  id        String           @id @default(cuid())
  user      User             @relation(fields: [userId], references: [id])
  course    Course           @relation(fields: [courseId], references: [id])
  userId    String
  courseId  String
  status    EnrollmentStatus
  startDate DateTime         @default(now())
}

enum EnrollmentStatus {
  pending
  completed
  cancelled
}

model Teacher {
  id            String         @id @default(cuid())
  user          User           @relation(fields: [userId], references: [id])
  userId        String         @unique
  description   String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  courses       Course[]
  demoLink      String
  teacherImages TeacherImage[]
  reviews       Review[]
  achievements  String[]
}

model TeacherImage {
  id        String   @id @default(cuid())
  url       String
  teacherId String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  createdAt DateTime @default(now())
}

model CourseImage {
  id       String  @id @default(cuid())
  url      String
  Course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  emailVerified DateTime? @map("email_verified")
  image         String?
  accounts      Account[]
  sessions      Session[]
  enrollments   Enrollment[]
  userType      UserType
  location      String?
  createdAt     DateTime  @default(now())
  profile       Profile?
  sentMessages     Message[]    @relation("SentMessages")
  receivedMessages Message[]    @relation("ReceivedMessages")
  Teacher       Teacher?
  reviews       Review[]
}

enum UserType {
  student
  teacher
}

model Message {
  id             String   @id @default(cuid())
  messageContent String
  sentAt         DateTime @default(now())
  senderId       String
  receiverId     String
  courseId       String?
  sender         User     @relation("SentMessages", fields: [senderId], references: [id])
  receiver       User     @relation("ReceivedMessages", fields: [receiverId], references: [id])
  course         Course?  @relation(fields: [courseId], references: [id])
}

model Profile {
  id         String     @id @default(cuid())
  bio        String?
  avatarUrl  String?
  location   String?
  experience String?
  skillLevel SkillLevel
  userId     String     @unique
  user       User       @relation(fields: [userId], references: [id])
  longitude  Float?
  latitude   Float?
}

enum SkillLevel {
  beginner
  intermediate
  advanced
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}

model Review {
  id        String   @id @default(cuid())
  rating    Int
  comment   String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
  teacher   Teacher  @relation(fields: [teacherId], references: [id])
  teacherId String
  createdAt DateTime @default(now())
}
